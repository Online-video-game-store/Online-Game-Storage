server:
  port: ${CATALOG_SERVICE_PORT:0}


spring:
  application:
    name: "CATALOG-SERVICE"

  output.ansi.enabled: ALWAYS

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/online-store-realm/protocol/openid-connect/certs
        # путь до Keycloack
        uri-base: http://localhost:8080/realms/online-store-realm   # /.well-known/openid-configuration

  # Cloud Bus + RabbitMQ
  cloud:
    function:
      definition: channelOrderEvents;channelOrderCancel
    stream:
      function:
        bindings:
          channelOrderEvents-in-0: orderEvents-in-0
          channelOrderCancel-in-0: orderCancel-in-0
      bindings:
        orderEvents-out-0:                # канал для отправки сообщений о успешном завершении операции
          destination: order.exchange     # exchange (обменник)
          content-type: application/json
        orderEvents-in-0:                 # канал для приема сообщений об успешных этапах операций
          destination: order.exchange
          content-type: application/json
          group: catalogGroup
        orderCancel-out-0:                # канал для уведомления об ошибке резервирования товара
          destination: order.exchange
          content-type: application/json
        orderCancel-in-0:                 # прием сообщений об ошибках и откатах операций
          destination: order.exchange
          content-type: application/json
          group: catalogGroup
      rabbit:
        bindings:
          orderEvents-out-0:
            producer:
              routing-key-expression: "headers['type']"   # сами управляем ключом маршрутизации
          orderEvents-in-0:
            consumer:
              binding-routing-key: 'order.created, payment.paid'
          orderCancel-out-0:
            producer:
              routing-key-expression: "headers['type']"
          orderCancel-in-0:
            consumer:
              binding-routing-key: 'payment.cancel, order.stop'
  rabbitmq:
    host: localhost
    port: 5672


  # H2 database
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:magazin         # будем использовать БД в памяти.
    username: sa
    password:
  # консоль для отладки
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true      # для удаленного доступа: localhost:8090/CATALOG-SERVICE/h2-console

  # автозапуск schema.sql
  sql:
    init:
      mode: always
#      platform: mysql
  # Spring Jpa Hibernate
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: none
        show_sql: false
        format_sql: false

    generate-ddl: false
#    defer-datasource-initialization: true
#    open-in-view: false

# настройки Эврики
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:7777/eureka}
    register-with-eureka: true                # Регистрация клиента в Eureka Server
    fetch-registry: true                      # Извлечение реестра из Eureka Server
    retry-on-connect-errors: true             # Повторные подключения к Eureka при сбоях
  instance:
    prefer-ip-address: false                  # Использовать IP-адрес вместо имени хоста
    lease-renewal-interval-in-seconds: 10     # Интервал отправки heartbeats
    lease-expiration-duration-in-seconds: 30  # Таймаут для истечения lease (сердцебиений)
