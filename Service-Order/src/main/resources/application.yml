server:
  port: ${ORDER_SERVICE_PORT:0}

spring:
  application:
    name: "ORDER-SERVICE"
  output.ansi.enabled: ALWAYS

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${OAUTH2_BASE_ISSUER_URI:http://localhost:8080}/realms/online-store-realm/protocol/openid-connect/certs
        # путь до Keycloack
        uri-base: ${OAUTH2_BASE_ISSUER_URI:http://localhost:8080}/realms/online-store-realm   # /.well-known/openid-configuration

  # Cloud Bus + RabbitMQ
  cloud:
    function:
      definition: channelOrderEvents;channelOrderCancel
    stream:
      default-binder: rabbit
      function:
        bindings:
          channelOrderEvents-in-0: ch-pk8000-order-in
          channelOrderCancel-in-0: ch-pk8000-cancel-in
      bindings:
        # Выходные каналы
        ch-pk8000-order-out:
          destination: pk8000.order.exchange  # exchange (обменник)
          content-type: application/json
        ch-pk8000-cancel-out:
          destination: pk8000.cancel.exchange
          content-type: application/json
        # Входные каналы
        ch-pk8000-order-in:
          destination: pk8000.order.exchange
          group: ${spring.application.name}-orders-group
          content-type: application/json
        ch-pk8000-cancel-in:
          destination: pk8000.cancel.exchange
          group: ${spring.application.name}-orders-group
          content-type: application/json
      rabbit:
        bindings:
          ch-pk8000-order-out:
            producer:
              exchange-type: direct
              declare-exchange: true
              routing-key-expression: "headers['routingKey']"
          ch-pk8000-cancel-out:
            producer:
              exchange-type: direct
              declare-exchange: true
              routing-key-expression: "headers['routingKey']"
          # Входные каналы
          ch-pk8000-order-in:
            consumer:
              exchange-type: direct
              declare-exchange: true
              auto-bind-dlq: true
              binding-routing-key: "product.transferred"
          ch-pk8000-cancel-in:
            consumer:
              exchange-type: direct
              declare-exchange: true
              auto-bind-dlq: true
              binding-routing-key-delimiter: ","
              binding-routing-key: "product.cancel,payment.cancel"
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest



  # H2 database
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:file:./data/order
    username: sa
    password:
  hikari:
    connection-init-sql: SET MODE MYSQL

  # Spring Jpa Hibernate
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        show_sql: false
        format_sql: true
        highlight_sql: true

    generate-ddl: true
    defer-datasource-initialization: true
    open-in-view: false
  # автозапуск скриптов 'schema.sql' и 'data.sql'
  sql:
    init:
      mode: never           # не нужен
  # консоль для отладки
  h2:
    console:
      enabled: false

# настройки Эврики
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:7777/eureka}
    register-with-eureka: true                # Регистрация клиента в Eureka Server
    fetch-registry: true                      # Извлечение реестра из Eureka Server
    retry-on-connect-errors: true             # Повторные подключения к Eureka при сбоях
  instance:
    prefer-ip-address: false                  # Использовать IP-адрес вместо имени хоста
    lease-renewal-interval-in-seconds: 10     # Интервал отправки heartbeats
    lease-expiration-duration-in-seconds: 30  # Таймаут для истечения lease (сердцебиений)


#logging:
#  level:
#    org.springframework.cloud.stream: DEBUG
#    org.springframework.amqp: DEBUG
