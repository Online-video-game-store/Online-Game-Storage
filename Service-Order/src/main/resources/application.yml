server:
  port: ${ORDER_SERVICE_PORT:10000}

spring:
  application:
    name: "ORDER-SERVICE"
  output.ansi.enabled: ALWAYS

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/online-store-realm/protocol/openid-connect/certs

  # Cloud Bus + RabbitMQ
  cloud:
    stream:
      bindings:
        orderCreate-out-0:                # канал для отправки сообщений
          destination: order.exchange     # exchange (обменник)
          content-type: application/json
#        orderCreate-in-0:
#          destination: order.exchange
#          content-type: application/json
#          group: orderGroup
#        orderCancel-out-0:
#          destination: order.exchange
#          content-type: application/json
#        orderCancel-in-0:
#          destination: order.exchange
#          content-type: application/json
#          group: orderGroup
      rabbit:
        bindings:
          orderCreate-out-0:
            producer:
              routing-key-expression: 'order.created'   # ключ маршрутизации
#          orderCreate-in-0:
#            consumer:
#              binding-routing-key: 'order.created'
#
#  cloud:
#    stream:
#      default-binder: rabbit
#      bindings:
#        order-create-out-0:
#          destination: orders
#          binder: rabbit
#          producer:
#            required-groups: order-group
#        order-create-in-0:
#          destination: orders
#          binder: rabbit
#          group: order-group
#      rabbit:
#        bindings:
#          order-create-in-0:
#            consumer:
#              queue-name-group-only: true
  rabbitmq:
    host: localhost
    port: 5672



  #    bus:
#      enabled: true
#      amqp:
#        enabled: true
#        host: localhost
#        port: 5672
#        username: guest
#        password: guest
#  amqp:
#    enabled: true
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest

  # H2 database
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:file:./data/order
    username: sa
    password:
  hikari:
    connection-init-sql: SET MODE MYSQL

  # Spring Jpa Hibernate
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        show_sql: false
        format_sql: true
        highlight_sql: true

    generate-ddl: true
    defer-datasource-initialization: true
    open-in-view: false
  # автозапуск скриптов 'schema.sql' и 'data.sql'
  sql:
    init:
      mode: never           # не нужен
  # консоль для отладки
  h2:
    console:
      enabled: false

# настройки Эврики
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:7777/eureka}
    register-with-eureka: true                # Регистрация клиента в Eureka Server
    fetch-registry: true                      # Извлечение реестра из Eureka Server
    retry-on-connect-errors: true             # Повторные подключения к Eureka при сбоях
  instance:
    prefer-ip-address: false                  # Использовать IP-адрес вместо имени хоста
    lease-renewal-interval-in-seconds: 10     # Интервал отправки heartbeats
    lease-expiration-duration-in-seconds: 30  # Таймаут для истечения lease (сердцебиений)
