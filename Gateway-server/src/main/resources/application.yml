server:
  port: 9000

spring:
  application:
    name: "GATEWAY-SERVER"

  output:
    ansi:
      enabled: ALWAYS

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/test-realm/protocol/openid-connect/certs
      client:
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/test-realm
        registration:
          test-client-id:
            provider: keycloak
            client-id: test-client-id
            client-secret: 91js8TIy4Y3XMwARYlygE3EN4jPkN1O1
            authorization-grant-type: authorization_code
            scope: openid

#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          jwk-set-uri: http://localhost:8080/realms/online-store-realm/protocol/openid-connect/certs
#      client:
#        provider:
#          keycloak:
#            issuer-uri: http://localhost:8080/realms/online-store-realm
#        registration:
#          online-store-client-id:
#            provider: keycloak
#            client-id: online-store-client-id
#            client-secret: klXPhoCioaD3sepZQf0YMVtJdr0DuZ88
#            authorization-grant-type: authorization_code
#            scope: openid

  cloud:
    gateway:
      default-filters:
        - TokenRelay=
      routes:
        - id: callme-service
          uri: http://localhost:8040
          predicates:
            - Path=/callme/**
#        - id: caller-service
#          uri: http://localhost:8020
#          predicates:
#            - Path=/caller/**

logging.level:
  org.springframework.cloud.gateway: DEBUG
  org.springframework.security: DEBUG
  org.springframework.web.reactive.function.client: TRACE

#  cloud:
#    gateway:
#      default-filters:
#        - TokenRelay=
#      discovery:
#        locator:
#          enabled: true
#          lower-case-service-id: false
#      routes:
#        - id: web-client
#          uri: lb://WEB-CLIENT
#          predicates:
#            - Path=/api/web-service/**, /api/web-service/static/**
#          filters:
#            - Retry=3         # Повторить запрос до 3 раз при сбое
#
#        - id: transfer-service
#          uri: lb://TRANSFER-SERVICE
#          predicates:
#            - Path=/api/transfer/**
#          filters:
#            - Retry=3         # Повторить запрос до 3 раз при сбое
#  #            - RemoveRequestHeader=Authorization   # удаляем исходный токен

#  security:
#    oauth2:
#      client:
#        provider:
#          spring:
#            issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8090} # сервер аутентификации
#        registration:
#          apm-client:
#            provider: spring
#            client-id: client
#            client-secret: "secret"
#            authorization-grant-type: authorization_code
#            client-authentication-method: client_secret_basic
#            redirect-uri: ${OAUTH2_REDIRECT_URI:{baseUrl}/login/oauth2/code/{registrationId}}
#            scope:
#              - openid
#      resourceserver:
#        jwt:
#          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8090}     # сервер аутентификации
#
#    loadbalancer:
#      retry:
#        enabled: true                         # Повторные попытки при сбоях балансировщика
#      healthCheck:
#        enabled: true                         # включение проверки состояния для сервисов
#
#eureka:
#  client:
#    service-url:
#      defaultZone: ${EUREKA_SERVER_URL:http://localhost:7777/eureka}
#    register-with-eureka: true                # Регистрация клиента в Eureka Server
#    fetch-registry: true                      # Извлечение реестра из Eureka Server
#    retry-on-connect-errors: true             # Повторные подключения к Eureka при сбоях
#  instance:
#    prefer-ip-address: false                  # Использовать IP-адрес вместо имени хоста
#    lease-renewal-interval-in-seconds: 10     # Интервал отправки heartbeats
#    lease-expiration-duration-in-seconds: 30  # Таймаут для истечения lease (сердцебиений)
#
##logging.level:
##  org.springframework.cloud.gateway: DEBUG
##  org.springframework.security: DEBUG
##  org.springframework.web.reactive.function.client: TRACE
##logging:
##  level:
##    org:
##      springframework: DEBUG
